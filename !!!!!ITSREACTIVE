library(readr)
library(shiny)
library(ggplot2)
library(dplyr)
library(tidyverse)
library(curl)
#Assigning the data set to SBA
SBAnational <- read.csv("C:/Stat_385/aarroy30/SBANational.csv", stringsAsFactors = FALSE)
SBAnational_data <- SBAnational
#Getting rid of the decimals and spaces in Gross Approved 
SBAnational_data$GrAppv <- as.numeric(gsub("\\$|,", "", SBAnational$GrAppv))

SBAnational_data$UrbanRural<- as.factor(SBAnational_data$UrbanRural)
levels(SBAnational_data$UrbanRural) <- c("Missing","Urban", "Rural")

SBAnational_data$ApprovalFY<- as.numeric(SBAnational_data$ApprovalFY)
str(SBAnational_data)

SBAnational_data$RevLineCr<-as.factor(SBAnational_data$RevLineCr)



ui <- fluidPage(
    
    #Title
    titlePanel("GRappv Versus Loan Term"),
    
    #Filters Here
    sidebarLayout(
        sidebarPanel(
                     h4("Variables"),
                     selectInput("RevLineCr",
                                 "Revolving Line of",
                                 (sort(
                                     unique(SBAnational_data$RevLineCr),
                                 ))),
                     selectInput("UrbanRural",
                                 "Urban or Rural",
                                 (sort(
                                     unique(SBAnational_data$UrbanRural)
                                 ))),
                     h4("GrAppv Summary"),
                     verbatimTextOutput("summary"),
                     
                     sliderInput(
                         "lm",
                         "Gross Approved",
                         min = min(SBAnational_data$GrAppv),
                         max = max(SBAnational_data$GrAppv),
                         value = median(SBAnational_data$GrAppv),
                         step = 0.5
                     ),
                     h4("Esimated GrAppv based on Selected Variables"),
                     verbatimTextOutput("predict"),
                     width = 4
        ),

#Name and Plot Here
mainPanel(tabsetPanel(
    tabPanel("Plot", plotOutput("distPlot"))
))))



server <- function(input, output)
{
    
    output$distPlot <- renderPlot ({
        
        SBAnational_data_sub <- 
            subset(
                SBAnational_data,
                UrbanRural == input$UrbanRural & 
                    RevLineCr == input$RevlineCr 
            )
        p <- 
            ggplot(data = SBAnational_data, aes(x = ApprovalFY, y = GrAppv)) + geom_point()
        p <- 
            p + geom_smooth(method = "lm") + xlab("Approval") + ylab("GrAppv")
        p <- p + xlim(1970,2016) + ylim(0,500000)
        p
    }, height = 700)
    
    output$predict <- renderPrint({
        SBAnational_data_sub <- 
            subset(
                SBAnational_data,
                UrbanRural == input$UrbanRural & 
                    RevLineCr == input$RevlineCr 
            )
        fit <- lm(ApprovalFY~GrAppv, data=SBAnational_data)
        unname(predict(fit, data.frame(GrAppv = input$lm)))
    })
    #Apply the filter 
    observeEvent(input$appfil, {
        distPlot <<- NULL
        output$distPlot <- renderPlot({
            SBAnational_data_sub <- 
                subset(
                    SBAnational_data,
                    UrbanRural == input$UrbanRural & 
                        RevLineCr == input$RevlineCr 
                )
            p <- 
                ggplot(data = SBAnational_data, aes(x = ApprovalFY, y = GrAppv)) + geom_point()
            p <- 
                p + geom_smooth(method = "lm") + xlab("ApprovalFY") + ylab("GrAppv")
            p <- p + xlim(0,400) + ylim(0,500000)
            p
        }, height = 700)
        #linear model 
        output$predict <- renderPrint({
            SBAnational_data_sub <- 
                subset(
                    SBAnational_data,
                    UrbanRural == input$UrbanRural & 
                        RevLineCr == input$RevlineCr 
                )
            fit <- lm(GrAppv~ApprovalFY, data=SBAnational_data)
            unname(predict(fit, data.frame(GrAppv = input$lm)))
            
            
        })
        })
    }
    
        
        
    
    



# Run the application 
shinyApp(ui = ui, server = server)
